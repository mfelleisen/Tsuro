#! /bin/sh
#| -*- racket -*-
exec racket -tm "$0" ${1+"$@"}
|#
#lang racket

(provide
 ;; -> Void 
 main)

;; ---------------------------------------------------------------------------------------------------
(require (submod Tsuro/Code/Common/board json))
(require Tsuro/Code/Common/board)
(require SwDev/Testing/communication)

(require SwDev/Debugging/spy)

(module+ test
  (require SwDev/Testing/testing))

;; ---------------------------------------------------------------------------------------------------
(define UNEXPECTED "unexpected end of file") 
(define BAD-BOARD  "ill-formed board specification")
(define NOT-BOARD  "intermediate state specification expected")

(define (main)
  (define next #; (U JSexpr EOF X) (read-message))
  (define stat #; State
    (match next
      [(? eof-object?) (send-message UNEXPECTED)]
      [(state-pat)
       (define board-candidate (jsexpr->state next))
       (if board-candidate
           (send-message (state->jsexpr board-candidate))
           (send-message (format "~a, given ~e" BAD-BOARD next)))]
      [_ (send-message (format "~a, given ~e" NOT-BOARD next))]))
  (void))

;; ---------------------------------------------------------------------------------------------------
(module+ test
  (recording "board-tests/")

  (define state3* (list state3-jsexpr))
  (r-check-equal? main state3* state3* "no action state3")
  (define gstate* (list good-intermediate-state-jsexpr))
  (r-check-equal? main gstate* gstate* "no action good intermediate state")

  (r-check-exn main (list bad-intermediate-spec-jsexpr) BAD-BOARD "bad 1")
  (r-check-exn main (list bad-intermediate-spec-2-jsexpr) BAD-BOARD "bad 2")

  (r-check-exn main (list '[1]) NOT-BOARD "just an array")
  (r-check-exn main "[[1, 0],"  NOT-BOARD "the prefix of an intermediate")
  (r-check-exn main "[1,\""     NOT-BOARD "an open string"))